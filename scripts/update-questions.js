#!/usr/bin/env node

/**
 * CSV to Questions Data Parser
 *
 * This script reads Questions.csv and automatically generates questions-data.js
 * Run this whenever you update the CSV file to sync the questions.
 *
 * Usage: node scripts/update-questions.js
 */

const fs = require("fs");
const path = require("path");

// File paths
const csvPath = path.join(__dirname, "../docs/Questions.csv");
const outputPath = path.join(__dirname, "../questions-data.js");

function parseCSV(csvContent) {
  const lines = csvContent.split("\n").filter((line) => line.trim());
  const headers = lines[0].split(",").map((h) => h.replace(/"/g, "").trim());

  console.log("📋 Found columns:", headers);

  // Initialize question sets
  const questionSets = {
    "Kinnari-Saraiya": [],
    dmstfctn: [],
    "Georgia-Gardner": [],
    "Exhibition-Questions": [],
  };

  // Map CSV columns to our question sets
  const columnMapping = {
    0: "Kinnari-Saraiya", // "Kinnari questions"
    1: "dmstfctn", // "dmstfctn questions"
    2: "Georgia-Gardner", // "Georgia questions"
    3: "Exhibition-Questions", // "Authenticity understanding / perceptions"
    4: "Exhibition-Questions", // "Change of thought / behaviour"
    5: "Exhibition-Questions", // "General questions on the experience"
    6: "Exhibition-Questions", // "General questions on accessibility / general feedback"
  };

  // Process data rows (skip header)
  for (let i = 1; i < lines.length; i++) {
    const line = lines[i];
    if (!line.trim()) continue;

    // Simple CSV parsing (handles quotes)
    const columns = [];
    let current = "";
    let inQuotes = false;

    for (let j = 0; j < line.length; j++) {
      const char = line[j];

      if (char === '"') {
        inQuotes = !inQuotes;
      } else if (char === "," && !inQuotes) {
        columns.push(current.trim());
        current = "";
      } else {
        current += char;
      }
    }
    columns.push(current.trim()); // Add last column

    // Add questions to appropriate sets
    columns.forEach((question, colIndex) => {
      const cleanQuestion = question.replace(/^"|"$/g, "").trim();
      if (cleanQuestion && cleanQuestion.length > 0) {
        const setName = columnMapping[colIndex];
        if (setName && questionSets[setName]) {
          // Avoid duplicates
          if (!questionSets[setName].includes(cleanQuestion)) {
            questionSets[setName].push(cleanQuestion);
          }
        }
      }
    });
  }

  return questionSets;
}

function generateJavaScript(questionSets) {
  const timestamp = new Date().toISOString();

  let output = `// Shared question data parsed from Questions.csv
// This file is automatically generated - do not edit manually
// Generated: ${timestamp}

const QUESTION_DATA = {
`;

  // Add each question set
  Object.entries(questionSets).forEach(([setName, questions]) => {
    output += `  "${setName}": [\n`;
    questions.forEach((question) => {
      // Escape quotes and add proper indentation
      const escapedQuestion = question.replace(/"/g, '\\"');
      output += `    "${escapedQuestion}",\n`;
    });
    output += `  ],\n\n`;
  });

  output += `};

// Export for use in other scripts
if (typeof window !== 'undefined') {
  window.QUESTION_DATA = QUESTION_DATA;
}
if (typeof module !== 'undefined' && module.exports) {
  module.exports = QUESTION_DATA;
}`;

  return output;
}

function main() {
  try {
    console.log("🔄 Updating questions from CSV...");

    // Read CSV file
    if (!fs.existsSync(csvPath)) {
      console.error(`❌ CSV file not found: ${csvPath}`);
      process.exit(1);
    }

    const csvContent = fs.readFileSync(csvPath, "utf8");
    console.log("✅ CSV file loaded");

    // Parse CSV
    const questionSets = parseCSV(csvContent);

    // Log statistics
    Object.entries(questionSets).forEach(([setName, questions]) => {
      console.log(`📝 ${setName}: ${questions.length} questions`);
    });

    // Generate JavaScript
    const jsContent = generateJavaScript(questionSets);

    // Write output file
    fs.writeFileSync(outputPath, jsContent, "utf8");
    console.log(`✅ Generated: ${outputPath}`);

    console.log("🎉 Questions updated successfully!");
    console.log("💡 Commit and push to deploy the changes");
  } catch (error) {
    console.error("❌ Error updating questions:", error.message);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  main();
}

module.exports = { parseCSV, generateJavaScript };
